title:: GMTapTempo
summary:: A simple tap tempo button for creating graphical interfaces
categories:: GUI>Graphical Module
related:: Classes/GMUserView, Classes/GMStyle

description::
link::Classes/GMTapTempo:: is an easy to use customisable button that allows to specify a tempo by clicking it regularly. In addition, it displays its BPM and can display a visual feedback when a new beat is triggered.

subsection::First click & reset

When clicking it regularly, link::Classes/GMTapTempo:: will output a link::Classes/Number:: value expressed in beats per minute. This value is calculated averaging the elapsed time between clicks.

First, this means that when clicking for the first time (or when resetted), it will output code::nil:: instead, because it needs at least two clicks to express a time value.

Second, it needs to be able to discriminate between a click that is part from the current tempo specification, or a click that initiate a new tempo specification. To do so, it will check how much time has passed since the last click. If this time is more than twice the current BPM, it will assume a new tempo specification is starting, thus resetting.

subsection::Action

Depending on your needs, a tap tempo button might initiate different actions. For example, one might simply want to adjust a link::Classes/TempoClock:: tempo. Or one might want to pause a routine, yield its next events on subsequent clicks, and resume the routine at the new tempo when clicks have stopped.

To provide as much polyvalence as possible, link::Classes/GMTapTempo:: associated code::action:: is a link::Classes/Function:: which takes two arguments: the current BPM, and a 'time list'.

On the first click (or when resetting), the function will be called passing code::nil:: as BPM argument. On subsequent clicks, the function will be called will be called passing an average of the time between each clicks as BPM argument.

Every time the button is clicked, the event time will be registered in two formats:

Date format: code::Date().hourStamp::

Time since SC started: code::SystemClock.seconds::

Those two timestamps are concatenated inside an array, and stored within a 'time list', which is passed to the code::action:: function every time it is called, allowing to trace each clicks position in time.

classmethods::

method:: new
Creates a new instance of link::Classes/GMTapTempo::.

instancemethods::

subsection::Interaction

method:: action
Sets or gets the link::Classes/Function:: to be triggered when the button is pressed down. This link::Classes/Function:: takes two arguments: the current BPM, and a list of events timestamps.

method:: bpm
Sets or gets the current bpm.

subsection::Graphics

method:: blink
Triggers a visual feedback used to a indicate a new beat. View's refresh is internally deferred so this method can be called within a link::Classes/Routine:: context.

method:: blinkColor
Sets or gets the button color when it blinks.

method:: blinkFontColor
Sets or gets the string color when it blinks.

method:: stringRatio
Sets or gets the string ratio relative to the widget's height.

subsection::Internal Methods

method:: draw

examples::

code::
(
var win = Window.new(
	"",
	Rect(0, 400, 200, 200)
);
var tapTempoButton;
var clock = TempoClock();
var routine;
var notes = (Scale.at(\mixolydian).ratios ++ [2]) * 48.midicps;

SynthDef(\GMhelp, {
	|out = 0, amp = 0.1, freq = 440|
	var snd = SinOsc.ar(freq, mul: amp);
	snd = snd * EnvGen.kr(Env.perc);
	Out.ar(0, snd!2);
}).add;

tapTempoButton = GMTapTempo()
.bpm_(60 * clock.tempo)
.action_({ |bpm|
	if(bpm.notNil)
	{ clock.tempo_(bpm / 60); };
}).front;

routine = Routine({
	loop {
		Synth(\GMhelp, [\freq, notes.choose]);
		tapTempoButton.blink;
		1.wait;
	}
}).play(clock);

win.layout_(
	VLayout()
	.margins_(0)
	.add(tapTempoButton)
);
win.front;

win.onClose_({ routine.stop; });
// Useful when developping
CmdPeriod.doOnce({ win.close; });
)
::