TITLE:: GMKeyboard
summary:: A widget that displays a keyboard and can interface a HID
categories:: GUI>Graphical Module
related:: Classes/GMUserView, Classes/GMStyle

DESCRIPTION::
link::Classes/GMKeyboard:: is a strong::piano keyboard:: emulation widget, with visual feedback.

It includes two displays modes : code::diatonic:: or code::chromatic::.

It also provides an easy way to be controlled by a HID (a computer keyboard or a MIDI device). See the example section for a detailed example of this functionality.

CLASSMETHODS::

METHOD:: new
Creates a new instance of link::Classes/GMKeyboard::.

Its graphical properties are defined by its associated link::Classes/GMStyle::.

INSTANCEMETHODS::

subsection::Interaction

METHOD:: action
Sets or gets the link::Classes/Function:: to be triggered when the button is pressed down. This link::Classes/Function:: takes an link::Classes/Integer:: argument: the index of the pressed key. If code::sustainMode:: is set to code::true::, the action will take a second argument : a link::Classes/Boolean:: indicating if the key has been pressed or released.

METHOD:: sustainMode
Sets or gets wether the keyboard only responds to code::mouseDownAction::, or if it emits two different actions when pressed or released (see code::action::).

METHOD:: keyNumber
Sets or gets the number of displayed keys.

subsection::Graphics

METHOD:: mode
Sets or gets the keyboard display mode. Valid values are either code::\diatonic:: or code::\chromatic::.

Changing mode will reset names and highlights.

METHOD:: chromaticStartNote
In code::chromatic:: mode, sets or gets the offset of the keyboard representation.

For example, with a value of 3, the keyboard representation would start with the 'Eb' key instead of the 'C' key.

METHOD:: displayNames
Sets or gets wether labels should be displayed on the keyboard.

METHOD:: names
Sets or gets the labels displayed on keys.

When using code::chromatic:: mode, code::chromaticStartNote:: is used to offset the index of labels. This means that, in code::chromatic:: mode, when names are overriden, the first index of the array still corresponds to the 'C' key of the keyboard, even if the keyboard display has been offset.

METHOD:: displayHighlights
Sets or gets wether certain notes should be highlighted.

METHOD:: highlights
Sets or gets the key highlighting policy. The array will be wrapped around if its size is shorter than the number of keys. As an example, in code::diatonic:: mode, code::[1, 0.5, 0.75, 0.5, 0.75, 0.5 , 0.5]:: will highlight the fundamental, the third and the fifth of the scale.

METHOD:: names
Sets or gets the labels displayed on keys.

METHOD:: keyColor
Sets or gets the link::Classes/Color:: that will be used to draw 'white' keys.

METHOD:: keyOutlineColor
Sets or gets the border link::Classes/Color:: that will be used to draw 'white' keys.

METHOD:: blackKeyColor
Sets or gets the link::Classes/Color:: that will be used to draw 'black' keys.

METHOD:: blackKeyOutlineColor
Sets or gets the border link::Classes/Color:: that will be used to draw 'black' keys.

METHOD:: blinkColor
Sets or gets the link::Classes/Color:: that will be used to draw keys when they've been pressed.

METHOD:: blinkFontColor
Sets or gets the link::Classes/Color:: that will be used to draw labels on keys when they've been pressed.

METHOD:: fontRatio
Sets or gets the relative size of labels displayed on keys.

METHOD:: margins
Sets or gets the margins size between keys, in pixel.

METHOD:: outlineKeys
Sets or gets wether keys borders should be drawn.

METHOD:: blackKeyRatio
Sets or gets the height of 'black' keys relative to the size of 'white' keys.

subsection::HID interfacing

METHOD:: playKey
Plays the key at specified index, starting its blinking animation. If code::doAction:: is code::true::, this will also evaluate the associated code::action::, passing only the key index as argument.

METHOD:: sustainKey
Plays the key at specified index, toggling its color. If code::doAction:: is code::true::, this will also evaluate the associated code::action::, passing the key index as argument, and code::true::, meaning the key has been pressed.

METHOD:: releaseKey
Stops the key at specified index, starting its blinking animation. If code::doAction:: is code::true::, this will also evaluate the associated code::action::, passing the key index as argument, and code::false::, meaning the key has been released.

subsection::Internal methods

METHOD:: draw
The function associated to the link::Classes/View::'s code::drawFunc::. Shouldn't be modified.

METHOD:: prAddBlink
METHOD:: prDetectChromaKey
METHOD:: prDrawChromatic
METHOD:: prDrawDiatonic
METHOD:: prDrawKey
METHOD:: prDrawLeftKey
METHOD:: prDrawMiddleKey
METHOD:: prDrawRightKey
METHOD:: prGetChromaticCaseSize
METHOD:: prGetTimerColor
METHOD:: prGetWhiteKeysNumber
METHOD:: prUpdateBlinks

EXAMPLES::

strong::Simple setup example:::

code::
(
s.waitForBoot({
	var win = Window.new(
		"",
		Rect(0, 400, 700, 300)
	);

	var keyboard;
	// Using an Array to map key index
	// to a particular frequency
	var freqs = Scale.at(\chromatic).ratios * 220;
	freqs = freqs ++ 440;

	SynthDef(\GMKeyboard, {
		|out = 0, amp = 0.1, freq = 440|
		var snd = SinOsc.ar(freq, mul: amp);
		snd = snd * EnvGen.kr(Env.perc);
		Out.ar(0, snd!2);
	}).add;

	keyboard = GMKeyboard()
	.margins_(8)
	.displayHighlights_(true)
	.mode_(\chromatic)
	.keyNumber_(13)
	.action_({ |index|
		Synth(\GMKeyboard, [\freq, freqs[index]]);
	});

	win.layout_(
		HLayout()
		.margins_(0)
		.add(keyboard)
	);

	win.front;

	CmdPeriod.doOnce({ win.close; });
});
)
::

strong::Sustain mode example:::

Synths are stored inside an array so they can be accessed when they are released.
Pressing a key will play the synth, releasing a key will release the synths enveloppe.

code::
(
s.waitForBoot({
	var win = Window.new(
		"",
		Rect(0, 400, 700, 300)
	);

	var keyboard, freqs, synths;

	freqs = Scale.at(\chromatic).ratios * 220;
	freqs = freqs ++ 440;

	synths = Array.fill(freqs.size, { nil });

	SynthDef(\GMKBSustain, {
		|out = 0, amp = 0.1, freq = 440, gate = 1|
		var snd = SinOsc.ar(freq, mul: amp);
		var env = Env(
			[0, 1, 0],
			[0.005, 0.5],
			\lin,
			1
		);
		snd = snd * EnvGen.kr(
			env,
			gate,
			doneAction: Done.freeSelf
		);
		Out.ar(0, snd!2);
	}).add;

	keyboard = GMKeyboard()
	.margins_(8)
	.displayHighlights_(true)
	.mode_(\chromatic)
	.keyNumber_(13)

	.sustainMode_(true)
	.action_({ |index, sustain|
		if(sustain) {
			synths[index] =
			Synth(\GMKBSustain, [\freq, freqs[index]]);
		} {
			synths[index].set(\gate, 0);
			synths[index] = nil;
		};
	});

	win.layout_(
		HLayout()
		.margins_(0)
		.add(keyboard)
	);

	win.front;

	CmdPeriod.doOnce({ win.close; });
});
)
::

strong::HID interfacing example:::

WARNING::This functionality is currently unavailable when using computer keyboard (unless using 'hacks'), due to the current implementation of Qts keyboard response to held keys. See https://github.com/supercollider/supercollider/issues/6466 .::

code::playKey::, code::sustainKey:: and code::releaseKey:: allow to use link::Classes/GMKeyboard:: as an interface, using a link::Classes/HID::.

The idea is that the link::Classes/GMKeyboard:: is responsible for the code::action::, with the link::Classes/HID:: only 'pressing' the keys, thus triggering the action.

In fact, triggering the code::action:: is optionnal and will depend on the code::doAction:: argument of those methods. This allows you to animate the link::Classes/GMKeyboard:: with the link::Classes/HID:: without evaluating the code::action::.

This example demonstrates how to manipulate the link::Classes/GMKeyboard:: with a MIDI keyboard:

code::
(
s.waitForBoot({
	var win = Window.new(
		"",
		Rect(0, 400, 700, 300)
	);

	var keyboard, freqs, synths;

	// Create placeholders for MIDI instructions
	var midiNoteOnFunc, midiNoteOffFunc;

	// We need to offset midi notes so the left most
	// key corresponds to 0.
	// My keyboard starts with midi note 48:
	var noteOffset = 48;

	// Connect MIDI interfaces
	MIDIIn.connectAll;

	freqs = Scale.at(\chromatic).ratios * 220;
	freqs = freqs ++ 440;

	synths = Array.fill(freqs.size, { nil });

	SynthDef(\GMKBSustain, {
		|out = 0, amp = 0.1, freq = 440, gate = 1|
		var snd = SinOsc.ar(freq, mul: amp);
		var env = Env(
			[0, 1, 0],
			[0.005, 0.5],
			\lin,
			1
		);
		snd = snd * EnvGen.kr(
			env,
			gate,
			doneAction: Done.freeSelf
		);
		Out.ar(0, snd!2);
	}).add;

	keyboard = GMKeyboard()
	.margins_(8)
	.displayHighlights_(true)
	.mode_(\chromatic)
	.keyNumber_(13)

	.sustainMode_(true)
	.action_({ |index, sustain|
		if(sustain) {
			synths[index] =
			Synth(\GMKBSustain, [\freq, freqs[index]]);
		} {
			synths[index].set(\gate, 0);
			synths[index] = nil;
		};
	});

	// Assign MIDIFuncs:
	midiNoteOnFunc =
	MIDIFunc.noteOn({ |velocity, midiNote|
		// Converting midiNote as an index:
		midiNote = midiNote - noteOffset;

		// If midi note is in range, play it
		if(midiNote >= 0) {
			if(midiNote < keyboard.keyNumber) {
				// Call keyboard sustainKey,
				// asking it to perform the action
				keyboard.sustainKey(midiNote, true);

				// As an example, you could
				// only trigger the animation of the keyboard
				// without evaluating the action with:
				// keyboard.sustainNote(index, false);
			};
		};
	});

	// Same with noteOff and releaseKey:
	midiNoteOffFunc =
	MIDIFunc.noteOff({ |velocity, midiNote|
		midiNote = midiNote - noteOffset;
		if(midiNote >= 0) {
			if(midiNote < keyboard.keyNumber) {
				keyboard.releaseKey(midiNote, true);
			};
		};
	});

	win.layout_(
		HLayout()
		.margins_(0)
		.add(keyboard)
	);

	win.front;

	CmdPeriod.doOnce({
		// Free MIDIFuncs
		midiNoteOnFunc.free;
		midiNoteOffFunc.free;
		win.close;
	});
});
)
::
