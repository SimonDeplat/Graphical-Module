TITLE:: GMLineMultiSlider
summary:: A multi slider class that supports sequencer utilities
categories:: GUI>Graphical Module
related:: Classes/GMZZSlider, Classes/GMZZMultiSlider, Classes/GMFaderMultiSlider, Classes/GMSymbolMultiSlider, Classes/GMUserView, Classes/GMStyle

DESCRIPTION::

link::Classes/GMLineMultiSlider:: is an easy to use customisable multi slider.

It inherits from the link::Classes/GMZZMultiSlider:: class, and is only responsible for graphical specifications. See link::Classes/GMZZSlider:: and link::Classes/GMZZMultiSlider:: for non-graphical properties settings.

subsection::A note about this documentation

This class is a distant extension of the link::Classes/GMFaderSlider:: class. Methods that those two classes share are not documented here.

subsection::Usage

Although this class is similar to the link::Classes/GMFaderMultiSlider:: and link::Classes/GMSymbolMultiSlider::, the way it is displayed makes discrete values harder to distinguish.

This class was primarily designed to control an link::Classes/Env:: code::levels::, in the special case where all its code::times:: are equals, and its code::curves:: are linear only.

subsection::Sequencer interface

Even if this class was not intended to be used this way, it can be used, if needed, as a sequencer control.

First, it is possible to highlight some values so one can distinguish important times at first glance. Those highlights are specified using an array of float between 0 and 1, that should be the size of the values. The higher the value is, the bigger and opaque the highlight will be.

A 4/4 signature highlight :

code::
(
GMLineMultiSlider()
.values_([
	0, 0, 0, 0,
	0, 0, 0, 0
])
.highlights_([
	1, 0, 0.333, 0,
	0.666, 0, 0.333, 0
])
.drawHighlights_(true)
.front
)
::

A 6/8 signature highlight :

code::
(
GMLineMultiSlider()
.values_([
	0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0
])
.highlights_([
	1, 0, 0.333, 0, 0.333, 0,
	0.666, 0, 0.333, 0, 0.333, 0
])
.drawHighlights_(true)
.front
)
::

In addition, specifying a code::beat:: property will also highlight the associated slider. One can use a link::Classes/Routine:: (or any link::Classes/TempoClock:: based algorithm) to dynamically display the current beat. The graphical update is internally deferred.

code::
(
var currentBeat = 0;

var multiSlider = GMLineMultiSlider()
.values_([
	0, 0, 0, 0,
	0, 0, 0, 0
])
.highlights_([
	1, 0, 0.333, 0,
	0.666, 0, 0.333, 0
])
.drawHighlights_(true)
.beat_(currentBeat);

var routine = Routine({

	loop {
		// Do something here
		(0.25).wait;
		currentBeat = currentBeat + 1;
		if(currentBeat == multiSlider.values.size)
		{ currentBeat = 0; };
		multiSlider.beat_(currentBeat);
	}

}).play(TempoClock.default);

multiSlider.front;
)
::

CLASSMETHODS::

METHOD:: new
Creates a new instance of link::Classes/GMFaderMultiSlider::.

By default, its graphical properties are defined by its associated link::Classes/GMStyle::. This means that creating multi sliders with different colors implies creating multiples link::Classes/GMStyle::. The sliders color corresponds to the code::mainColor:: property.  The font color of the displayed value corresponds to the code::valueFontColor:: property.

returns:: a link::Classes/GMFaderMultiSlider:: instance.

INSTANCEMETHODS::

METHOD:: beat
Sets or gets the displayed beat. Set to code::-1:: to disable. This will internally
defer the graphical update.

METHOD:: drawHighlights
Sets or gets wether the highlights should be displayed.

METHOD:: highlightRatio
Sets or gets the highlights maximum ratio relative to the sliders available space.

METHOD:: highlights
Sets or gets the highlights weights. A weight of 1 will cause the highlight to be drawn at the maximum ratio, using the link::Classes/GMStyle:: code::highlightColor:: alpha value. Lower values will linearily decrease both the ratio and the alpha values.

METHOD:: drawDots
Sets or gets wether dots should be displayed on the line to highlight the value position.

METHOD:: dotsRatio
Sets or gets the dot size relative to the sliders available space.

METHOD:: fillShape
Sets or gets wether the surface under the line should be filled. Uses the link::Classes/GMStyle:: code::secondColor:: property.

METHOD:: joinExtremities
Sets or gets wether extremities of the line 'wrap around'. Mostly useful when controlling a looping enveloppe.

subsection::GMFaderSlider Methods

See the link::Classes/GMFaderSlider:: class documentation for those methods.

METHOD:: displayValues
METHOD:: centerValues
METHOD:: roundValue
METHOD:: displayFunction
METHOD:: fontRatio
METHOD:: drawHelpers
METHOD:: helpersStyle
METHOD:: helpersRatio
METHOD:: centerHelpers

subsection::Internal Methods

METHOD:: draw
METHOD:: prDrawSliders
METHOD:: prFillShape
METHOD:: prDrawHighlights
METHOD:: prDrawValues

EXAMPLES::

A simple interface that controls the enveloppe of the emitted sound :

code::
(
s.waitForBoot({
	fork {
		var levels = [0, 0, 0, 0, 0, 0, 0, 0];

		var routine;
		var routinePlaying = true;

		SynthDef(\GMEnv, { |amp = 0.25, freq = 220|
			var snd = SinOsc.ar(freq, mul: amp);
			var env = Env.newClear(8);
			var envCtl = \env.kr(env.asArray);
			var envGen = EnvGen.kr(
				envCtl,
				doneAction: Done.freeSelf
			);
			snd = snd * envGen;
			Out.ar(0, snd!2);
		}).add;

		s.sync;

		routine = Routine({
			loop {
				Synth(\GMEnv, [
					\env,
					Env()
					.levels_(levels)
					.times_(0.25!7)
				]);
				1.wait;
			};
		}).play(TempoClock.default);

		{
			var win = Window(
				"",
				Rect(
					0, 0,
					600, 400
				)
			);

			var multiSlider = GMLineMultiSlider()
			.values_(levels)
			.actionMode_(\index)
			.action_({ |index, value|
				levels[index] = value;
			});

			win.layout_(
				VLayout()
				.margins_(0)
				.add(multiSlider)
			);

			win.onClose_({
				if(routinePlaying)
				{ routine.stop; };
			});

			CmdPeriod.doOnce({
				routinePlaying = false;
				win.close;
			});
			win.front;

		}.defer;
	};
});
)
::

Used to control a looping parameter :

code::
(
s.waitForBoot({
	var synthFree = false;

	var levels = [55, 880, 440, 880, 440, 880, 440, 1760];

	var synth = SynthDef(\GMLoopEnv, { |amp = 0.25, freq = 220|
		var snd = Saw.ar(freq, mul: amp);
		var env = Env.newClear(10);
		var envCtl = \env.kr(env.asArray);
		var envGen = EnvGen.kr(envCtl);
		snd = BPF.ar(snd, envGen);
		Out.ar(0, snd!2);
	}).play(s, [
		\env,
		Env(
			levels
			.asList
			.insert(0, levels[0])
			.insert(levels.size + 1, levels[levels.size - 1]),
			0.25!9,
			\lin,
			8, 0
		)
	]);

	var win = Window(
		"",
		Rect(
			0, 0,
			600, 400
		)
	);

	var multiSlider = GMLineMultiSlider()
	.min_(55)
	.max_(3520)
	.scale_(\exp)
	.values_(levels)
	.actionMode_(\index)
	.roundValue_(1)
	.helperSubdivisions_(5)
	.joinExtremities_(true)
	.action_({ |index, value|
		levels[index] = value;
		synth.set(
			\env,
			Env(
				levels
				.asList
				.insert(0, levels[0])
				.insert(levels.size + 1, levels[levels.size - 1]),
				0.25!9,
				\lin,
				8, 0
			)
		);
	});

	win.layout_(
		VLayout()
		.margins_(0)
		.add(multiSlider)
	);

	win.onClose_({
		if(synthFree.not)
		{ synth.free; };
	});

	CmdPeriod.doOnce({
		synthFree = true;
		win.close;
	});
	win.front;
});
)
::
